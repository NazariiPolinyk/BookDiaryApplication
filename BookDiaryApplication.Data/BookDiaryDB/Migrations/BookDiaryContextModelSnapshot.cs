// <auto-generated />
using System;
using BookDiaryApplication.Data.BookDiaryApplicationDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookDiaryApplication.Data.BookDiaryDB.Migrations
{
    [DbContext(typeof(BookDiaryContext))]
    partial class BookDiaryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorRef")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreRef")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AuthorRef");

                    b.HasIndex("GenreRef");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.BookReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookRef")
                        .HasColumnType("int");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookRef");

                    b.HasIndex("UserRef");

                    b.ToTable("BookReview", (string)null);
                });

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.Book", b =>
                {
                    b.HasOne("BookDiaryApplication.Data.BookDiaryDB.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorRef")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Author");

                    b.HasOne("BookDiaryApplication.Data.BookDiaryDB.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreRef")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Genre");

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.BookReview", b =>
                {
                    b.HasOne("BookDiaryApplication.Data.BookDiaryDB.Models.Book", "Book")
                        .WithMany("BookReviews")
                        .HasForeignKey("BookRef")
                        .IsRequired()
                        .HasConstraintName("FK_BookReview_Book");

                    b.HasOne("BookDiaryApplication.Data.BookDiaryDB.Models.User", "User")
                        .WithMany("BookReviews")
                        .HasForeignKey("UserRef")
                        .IsRequired()
                        .HasConstraintName("FK_BookReview_User");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.Book", b =>
                {
                    b.Navigation("BookReviews");
                });

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookDiaryApplication.Data.BookDiaryDB.Models.User", b =>
                {
                    b.Navigation("BookReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
